#! /usr/bin/env python
#*  All rights reserved.
#*
#*  Redistribution and use in source and binary forms, with or without
#*  modification, are permitted provided that the following conditions
#*  are met:
#*
#*   * Redistributions of source code must retain the above copyright
#*     notice, this list of conditions and the following disclaimer.
#*   * Redistributions in binary form must reproduce the above
#*     copyright notice, this list of conditions and the following
#*     disclaimer in the documentation and/or other materials provided
#*     with the distribution.
#*   * Neither the name of the Willow Garage nor the names of its
#*     contributors may be used to endorse or promote products derived
#*     from this software without specific prior written permission.
#*
#*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
#*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#*  POSSIBILITY OF SUCH DAMAGE.
#***********************************************************

# Author: 

PACKAGE='cirp_vision'

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

cropping = gen.add_group("cropping")
cropping.add("crop_bottom", int_t, 0, "Crop from bottom border", 0, 0, 480)
cropping.add("crop_top", int_t, 0, "Crop from top border", 0, 0, 480)
cropping.add("crop_left", int_t, 0, "Crop from left border", 0, 0, 640)
cropping.add("crop_right", int_t, 0, "Crop from right border", 0, 0, 640)

tolerances = gen.add_group("tolerance")
tolerances.add("h_tolerance", int_t, 0,"Hue tolerance", 0, 0, 180)
tolerances.add("s_tolerance", int_t, 0,"Saturation tolerance", 0, 0, 255)
tolerances.add("v_tolerance", int_t, 0,"Value tolerance", 0, 0, 255)

other = gen.add_group("other")
other.add("min_area", double_t, 0, "Minimum contour area", 0, 0, 1000)
other.add("max_area", double_t, 0, "Maximum contour area", 10000, 0, 10000)
other.add("fg_erosion_r", int_t, 0, "Foreground erosion", 1, 1, 20)
other.add("bg_erosion_r", int_t, 0, "Background erosion", 6, 1, 20)
other.add("frame_tgt", str_t, 0, "Target frame", "")

segmenters = ["red", "blue", "green", "yellow"]
for seg in segmenters:
    group = gen.add_group(seg+"_central_color")
    group.add(seg+"_h", int_t, 0, "Central %s hue"%seg, 0, 0, 180)
    group.add(seg+"_s", int_t, 0, "Central %s saturation"%seg, 0, 0, 255)
    group.add(seg+"_v", int_t, 0, "Central %s value"%seg, 0, 0, 255)

#       Name                       Type       Reconfiguration level            Description                       Default   Min   Max
#gen.add("velocity_scale_factor",  double_t,  0,                               "Maximum velocity scale factor",  0.5,      0.0,  1.0)

exit(gen.generate(PACKAGE, "CirpVisionAlgorithm", "CirpVision"))
